/** convertPredictions
 * @module convertPredictions
 * @desc Used for converting the predictions generated by the model to
 * a format that can be used in CytoBrowser.
 */

const fs = require("fs");
const fsPromises = fs.promises;
const parse = require("csv-parse/lib/sync");

// TODO: Should be able to set these
const WIDTH = 10;
const HEIGHT = 10;

// Some info can be parsed from the filename itself
function parseImageInfo(filenames) {
    const indexFinder = /i\d+j\d+/;
    const iFinder = /(?<=i)\d+/;
    const jFinder = /(?<=j)\d+/;
    const entries = filenames.map(fn => {
        const index = fn.match(indexFinder);
        const i = index.match(iFinder);
        const j = index.match(jFinder);
        return {i: i, j: j, filename: fn};
    });
    return entries.sort((a, b) => a.i < b.i || a.j - b.j);
}

function readPredictedLocations(name, dir) {
    fsPromises.readdir(dir).then(content => {
        let fns = content.filter(n => n.startsWith(name));
        fns = content.filter(n => n.endsWith(".csv"));
        const entries = parseImageInfo(fns);
        entries.forEach(entry => entry.path = `${dir}/${entry.filename}`);
        entries.forEach(entry => entry.data = fs.readFileSync(entry.path));
        entries.forEach(entry => entry.predictions = parse(entry.data));
        const output = {
            id: [],
            x: [],
            y: []
        };
        entries.forEach(entry => {
            const offsetX = entry.j * WIDTH;
            const offsetY = entry.i * HEIGHT; // TODO: Check if dimensions are flipped
            entry.predictions.forEach(prediction => {
                output.id.push(id.length);
                output.x.push(prediction["X"] + offsetX);
                output.y.push(prediction["Y"] + offsetY);
            });
        });
        return output;
    });
}

function readPredictions(name, dir) {
    fsPromises.readdir(dir).then(content => {
        let fns = content.filter(n => n.startsWith(name));
        fns = content.filter(n => n.endsWith(".csv"));
        const entries = parseImageInfo(fns);
        entries.forEach(entry => entry.path = `${dir}/${entry.filename}`);
        entries.forEach(entry => entry.data = fs.readFileSync(entry.path));
        entries.forEach(entry => entry.predictions = parse(entry.data));
    });
}

function convertResultsToObject() {
    const results = {};
    return results;
}

function writeResultsAsJson() {
    const results = convertResultsToObject();

}
